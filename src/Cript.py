from cryptography.fernet import Fernet
from typing import TypeVar
import aiofiles


T = TypeVar("T")
ch256 = ''


async def writeKey():
    """
    Write key (NOT SECURE METHOD)
    :return:
    """
    global ch256

    try:
        async with aiofiles.open('key.txt', 'rb') as f:
            ch256 = await f.read()
            if len(ch256) == 0:
                async with aiofiles.open('key.txt', 'wb') as file:
                    FERNET_352BITS_HARDCODED_NOTSECURE = Fernet.generate_key()
                    ch256 = FERNET_352BITS_HARDCODED_NOTSECURE
                    await file.write(ch256)
    except FileNotFoundError:
        async with aiofiles.open('key.txt', 'wb') as file:
            FERNET_352BITS_HARDCODED_NOTSECURE = Fernet.generate_key()
            ch256 = FERNET_352BITS_HARDCODED_NOTSECURE
            await file.write(ch256)


async def crypto(content: T) -> T:
    """
    Cipher file block
    :param content:
    :return:
    """
    global ch256
    await writeKey()
    print(ch256)
    cipher = Fernet(ch256)
    # clear the key of main memory
    FERNET_352BITS_HARDCODED_NOTSECURE = [clear_memory for clear_memory in range(200)]
    FERNET_352BITS_HARDCODED_NOTSECURE += 1
    return cipher.encrypt(content)


