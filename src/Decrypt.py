import asyncio
import cryptography.fernet
from cryptography.fernet import Fernet
from typing import TypeVar
import aiofiles


T = TypeVar("T")
coded: bytes


async def readKey() -> T:
    """
    Write key (NOT SECURE METHOD)
    :return:
    """
    global coded
    try:
        async with aiofiles.open('key.txt', 'r') as f:
            coded = await f.readlines()
            coded = coded[0].encode()
    except FileNotFoundError:
        raise FileNotFoundError("Non exists")


async def decrypto(content: T) -> None:
    """
    Cipher file block
    :param content:
    :return:
    """
    await readKey()
    cipher = Fernet(coded)
    print(f"[*] WAIT INTO COMPLETE THE DECRYPT FILES...")
    print(f"[*] THIS CAN TAKE A LONG TIME...")
    async with aiofiles.open(content, 'r') as f:
        read = await f.read()
        try:
            decripted = cipher.decrypt(read.encode())
            async with aiofiles.open(content, 'w') as _file:
                await _file.write(decripted.decode())
                print(f"[*] file decrypt successfully")
        except cryptography.fernet.InvalidToken:
            ...


if __name__ == '__main__':
    asyncio.run(decrypto("C:\\teste_ransomware\\tessste.txt"))
